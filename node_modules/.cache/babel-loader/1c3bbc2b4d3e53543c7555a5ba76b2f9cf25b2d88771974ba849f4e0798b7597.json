{"ast":null,"code":"import _objectSpread from\"/home/mohanned/Downloads/battleship/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import computerAI from'./computerAI';function computerTurn(_ref){var playerBoard=_ref.playerBoard,setShotTimeout=_ref.setShotTimeout,checkWinner=_ref.checkWinner,computer=_ref.computer,dispatch=_ref.dispatch,players=_ref.players,playSound=_ref.playSound;// initialize mutable sound variable, allow outcomes to mutate\nvar sound;// prevent from running when locked for win conditions\nif(!checkWinner(players)){// computer waits for its turn, then fires\n// a little fake immersion\nsetTimeout(function(){dispatch({type:'SET_MESSAGE',payload:'Your opponent is aiming...'});},1000);setTimeout(function(){playSound('fireShot');var shotLocation=computerAI(players.human);if(playerBoard.checkIfShotHit(shotLocation)){sound='shotHit';var newShips=_objectSpread({},players.human).ships;var hitShip=newShips.find(function(ship){return ship.name===playerBoard.checkIfShotHit(shotLocation);});hitShip.hit(shotLocation);// update hits on human ships\ndispatch({type:'SET_SHIP_HITS',payload:{player:'human',ship:hitShip,hits:hitShip.hits}});if(hitShip.isSunk()){dispatch({type:'SET_MESSAGE',payload:\"The enemy fires a shot into your waters ...... they sunk your \".concat(hitShip.name,\"!\")});}else{dispatch({type:'SET_MESSAGE',payload:\"The enemy fires a shot into your waters ...... it's a hit!\"});}}else{sound='shotMiss';dispatch({type:'SET_MESSAGE',payload:'The enemy fires a shot into your waters ...... and misses.'});}// fire on that spot after message populates\nsetTimeout(function(){playSound(sound);computer.fireShot(shotLocation,playerBoard);dispatch({type:'SET_TURN',payload:0});setShotTimeout(false);},1800);},2600);}}export default computerTurn;","map":{"version":3,"names":["computerAI","computerTurn","playerBoard","setShotTimeout","checkWinner","computer","dispatch","players","playSound","sound","setTimeout","type","payload","shotLocation","human","checkIfShotHit","newShips","ships","hitShip","find","ship","name","hit","player","hits","isSunk","fireShot"],"sources":["/home/mohanned/Downloads/battleship/src/game_helpers/computerTurn.js"],"sourcesContent":["import computerAI from './computerAI';\n\nfunction computerTurn({\n\tplayerBoard,\n\tsetShotTimeout,\n\tcheckWinner,\n\tcomputer,\n\tdispatch,\n\tplayers,\n\tplaySound,\n}) {\n\t// initialize mutable sound variable, allow outcomes to mutate\n\tlet sound;\n\t// prevent from running when locked for win conditions\n\tif (!checkWinner(players)) {\n\t\t// computer waits for its turn, then fires\n\t\t// a little fake immersion\n\t\tsetTimeout(() => {\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_MESSAGE',\n\t\t\t\tpayload: 'Your opponent is aiming...',\n\t\t\t});\n\t\t}, 1000);\n\n\t\tsetTimeout(() => {\n\t\t\tplaySound('fireShot');\n\t\t\tconst shotLocation = computerAI(players.human);\n\t\t\tif (playerBoard.checkIfShotHit(shotLocation)) {\n\t\t\t\tsound = 'shotHit';\n\t\t\t\tconst newShips = { ...players.human }.ships;\n\t\t\t\tconst hitShip = newShips.find(\n\t\t\t\t\t(ship) => ship.name === playerBoard.checkIfShotHit(shotLocation)\n\t\t\t\t);\n\t\t\t\thitShip.hit(shotLocation);\n\t\t\t\t// update hits on human ships\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_SHIP_HITS',\n\t\t\t\t\tpayload: { player: 'human', ship: hitShip, hits: hitShip.hits },\n\t\t\t\t});\n\t\t\t\tif (hitShip.isSunk()) {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_MESSAGE',\n\t\t\t\t\t\tpayload: `The enemy fires a shot into your waters ...... they sunk your ${hitShip.name}!`,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_MESSAGE',\n\t\t\t\t\t\tpayload:\n\t\t\t\t\t\t\t\"The enemy fires a shot into your waters ...... it's a hit!\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsound = 'shotMiss';\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_MESSAGE',\n\t\t\t\t\tpayload: 'The enemy fires a shot into your waters ...... and misses.',\n\t\t\t\t});\n\t\t\t}\n\t\t\t// fire on that spot after message populates\n\t\t\tsetTimeout(() => {\n\t\t\t\tplaySound(sound);\n\t\t\t\tcomputer.fireShot(shotLocation, playerBoard);\n\t\t\t\tdispatch({ type: 'SET_TURN', payload: 0 });\n\t\t\t\tsetShotTimeout(false);\n\t\t\t}, 1800);\n\t\t}, 2600);\n\t}\n}\n\nexport default computerTurn;\n"],"mappings":"wHAAA,MAAOA,WAAU,KAAM,cAAc,CAErC,QAASC,aAAY,MAQlB,IAPFC,YAAW,MAAXA,WAAW,CACXC,cAAc,MAAdA,cAAc,CACdC,WAAW,MAAXA,WAAW,CACXC,QAAQ,MAARA,QAAQ,CACRC,QAAQ,MAARA,QAAQ,CACRC,OAAO,MAAPA,OAAO,CACPC,SAAS,MAATA,SAAS,CAET;AACA,GAAIC,MAAK,CACT;AACA,GAAI,CAACL,WAAW,CAACG,OAAO,CAAC,CAAE,CAC1B;AACA;AACAG,UAAU,CAAC,UAAM,CAChBJ,QAAQ,CAAC,CACRK,IAAI,CAAE,aAAa,CACnBC,OAAO,CAAE,4BACV,CAAC,CAAC,CACH,CAAC,CAAE,IAAI,CAAC,CAERF,UAAU,CAAC,UAAM,CAChBF,SAAS,CAAC,UAAU,CAAC,CACrB,GAAMK,aAAY,CAAGb,UAAU,CAACO,OAAO,CAACO,KAAK,CAAC,CAC9C,GAAIZ,WAAW,CAACa,cAAc,CAACF,YAAY,CAAC,CAAE,CAC7CJ,KAAK,CAAG,SAAS,CACjB,GAAMO,SAAQ,CAAG,iBAAKT,OAAO,CAACO,KAAK,EAAGG,KAAK,CAC3C,GAAMC,QAAO,CAAGF,QAAQ,CAACG,IAAI,CAC5B,SAACC,IAAI,QAAKA,KAAI,CAACC,IAAI,GAAKnB,WAAW,CAACa,cAAc,CAACF,YAAY,CAAC,GAChE,CACDK,OAAO,CAACI,GAAG,CAACT,YAAY,CAAC,CACzB;AACAP,QAAQ,CAAC,CACRK,IAAI,CAAE,eAAe,CACrBC,OAAO,CAAE,CAAEW,MAAM,CAAE,OAAO,CAAEH,IAAI,CAAEF,OAAO,CAAEM,IAAI,CAAEN,OAAO,CAACM,IAAK,CAC/D,CAAC,CAAC,CACF,GAAIN,OAAO,CAACO,MAAM,EAAE,CAAE,CACrBnB,QAAQ,CAAC,CACRK,IAAI,CAAE,aAAa,CACnBC,OAAO,yEAAmEM,OAAO,CAACG,IAAI,KACvF,CAAC,CAAC,CACH,CAAC,IAAM,CACNf,QAAQ,CAAC,CACRK,IAAI,CAAE,aAAa,CACnBC,OAAO,CACN,4DACF,CAAC,CAAC,CACH,CACD,CAAC,IAAM,CACNH,KAAK,CAAG,UAAU,CAClBH,QAAQ,CAAC,CACRK,IAAI,CAAE,aAAa,CACnBC,OAAO,CAAE,4DACV,CAAC,CAAC,CACH,CACA;AACAF,UAAU,CAAC,UAAM,CAChBF,SAAS,CAACC,KAAK,CAAC,CAChBJ,QAAQ,CAACqB,QAAQ,CAACb,YAAY,CAAEX,WAAW,CAAC,CAC5CI,QAAQ,CAAC,CAAEK,IAAI,CAAE,UAAU,CAAEC,OAAO,CAAE,CAAE,CAAC,CAAC,CAC1CT,cAAc,CAAC,KAAK,CAAC,CACtB,CAAC,CAAE,IAAI,CAAC,CACT,CAAC,CAAE,IAAI,CAAC,CACT,CACD,CAEA,cAAeF,aAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}