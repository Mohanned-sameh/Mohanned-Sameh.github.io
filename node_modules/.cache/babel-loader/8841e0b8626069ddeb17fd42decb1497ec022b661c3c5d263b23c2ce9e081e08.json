{"ast":null,"code":"function computerAI(player){var playerBoard=player.gameBoard;// create a version of the gameboard with only available shots\nvar availableShots=[];var unsunkShots=[];playerBoard.opponentBoard().forEach(function(loc,index){// get all available shots\nif(loc==='empty'){availableShots.push(index);}else if(loc==='hit'){// get all hits on board to test if we can find the rest of the ship\nunsunkShots.push(index);}});// filter out the shots that have sunk ships\nunsunkShots=unsunkShots.filter(function(cell){var hitShip=player.ships.find(function(ship){return ship.position.includes(cell);});return!hitShip.isSunk();});// DETECT SHIPS\n// locate any two shots that resemble a ship\nvar detectedShip=unsunkShots.filter(function(shot,index,thisArray){return thisArray.includes(shot+1)&&(shot-9)%10!==0||thisArray.includes(shot-1)&&shot%10!==0||thisArray.includes(shot+10)||thisArray.includes(shot-10);});// remove doubles\ndetectedShip=detectedShip.filter(function(cell,i,thisArray){return thisArray.lastIndexOf(cell)===i;});if(detectedShip.length){var axis=detectedShip[1]-detectedShip[0]===1?'x':'y';var possibleShots=[];if(axis==='x'){// add the cell to the left unless in the first column\nif(detectedShip[0]%10!==0)possibleShots.push(detectedShip[0]-1);// add the cell to the right unless in the last column\nvar furthestRight=detectedShip.find(function(cell,index,thisArray){return!thisArray.includes(cell+1);});if((furthestRight-9)%10!==0)possibleShots.push(furthestRight+1);}else{// add the cell above\npossibleShots.push(detectedShip[0]-10);// add the cell below\npossibleShots.push(detectedShip.find(function(cell,index,thisArray){return index!==0&&!thisArray.includes(cell+10);})+10);}// remove any that don't exist as available shots, either off the board\n// or already shot\nvar filteredPossibleShots=possibleShots.filter(function(shot){return availableShots.includes(shot);});if(filteredPossibleShots.length){return filteredPossibleShots[Math.floor(Math.random()*filteredPossibleShots.length)];}}// TARGET SOLO MARKER\nif(unsunkShots.length){var firstUnsunkShot=unsunkShots[0];var soloShotChoices=[firstUnsunkShot+1,firstUnsunkShot-1,firstUnsunkShot+10,firstUnsunkShot-10];var filteredSoloShots=soloShotChoices.filter(function(shot){// if this shot carries over to next row, ignore it\nif(firstUnsunkShot%10===0){return(shot-9)%10!==0&&availableShots.includes(shot);}else if((firstUnsunkShot-9)%10===0){return shot%10!==0&&availableShots.includes(shot);}return availableShots.includes(shot);});if(filteredSoloShots.length){return filteredSoloShots[Math.floor(Math.random()*filteredSoloShots.length)];}}// NOTHING DETECTED, FIRE RANDOMLY\n// return a random shot\nreturn availableShots[Math.floor(Math.random()*availableShots.length)];}export default computerAI;","map":{"version":3,"names":["computerAI","player","playerBoard","gameBoard","availableShots","unsunkShots","opponentBoard","forEach","loc","index","push","filter","cell","hitShip","ships","find","ship","position","includes","isSunk","detectedShip","shot","thisArray","i","lastIndexOf","length","axis","possibleShots","furthestRight","filteredPossibleShots","Math","floor","random","firstUnsunkShot","soloShotChoices","filteredSoloShots"],"sources":["/home/mohanned/Downloads/battleship/src/game_helpers/computerAI.js"],"sourcesContent":["function computerAI(player) {\n\tconst playerBoard = player.gameBoard;\n\t// create a version of the gameboard with only available shots\n\tconst availableShots = [];\n\tlet unsunkShots = [];\n\tplayerBoard.opponentBoard().forEach((loc, index) => {\n\t\t// get all available shots\n\t\tif (loc === 'empty') {\n\t\t\tavailableShots.push(index);\n\t\t} else if (loc === 'hit') {\n\t\t\t// get all hits on board to test if we can find the rest of the ship\n\t\t\tunsunkShots.push(index);\n\t\t}\n\t});\n\n\t// filter out the shots that have sunk ships\n\tunsunkShots = unsunkShots.filter((cell) => {\n\t\tconst hitShip = player.ships.find((ship) => ship.position.includes(cell));\n\t\treturn !hitShip.isSunk();\n\t});\n\n\t// DETECT SHIPS\n\t// locate any two shots that resemble a ship\n\tlet detectedShip = unsunkShots.filter((shot, index, thisArray) => {\n\t\treturn (\n\t\t\t(thisArray.includes(shot + 1) && (shot - 9) % 10 !== 0) ||\n\t\t\t(thisArray.includes(shot - 1) && shot % 10 !== 0) ||\n\t\t\tthisArray.includes(shot + 10) ||\n\t\t\tthisArray.includes(shot - 10)\n\t\t);\n\t});\n\n\t// remove doubles\n\tdetectedShip = detectedShip.filter((cell, i, thisArray) => {\n\t\treturn thisArray.lastIndexOf(cell) === i;\n\t});\n\n\tif (detectedShip.length) {\n\t\tconst axis = detectedShip[1] - detectedShip[0] === 1 ? 'x' : 'y';\n\t\tconst possibleShots = [];\n\t\tif (axis === 'x') {\n\t\t\t// add the cell to the left unless in the first column\n\t\t\tif (detectedShip[0] % 10 !== 0) possibleShots.push(detectedShip[0] - 1);\n\t\t\t// add the cell to the right unless in the last column\n\t\t\tconst furthestRight = detectedShip.find(\n\t\t\t\t(cell, index, thisArray) => !thisArray.includes(cell + 1)\n\t\t\t);\n\t\t\tif ((furthestRight - 9) % 10 !== 0)\n\t\t\t\tpossibleShots.push(furthestRight + 1);\n\t\t} else {\n\t\t\t// add the cell above\n\t\t\tpossibleShots.push(detectedShip[0] - 10);\n\t\t\t// add the cell below\n\t\t\tpossibleShots.push(\n\t\t\t\tdetectedShip.find((cell, index, thisArray) => {\n\t\t\t\t\treturn index !== 0 && !thisArray.includes(cell + 10);\n\t\t\t\t}) + 10\n\t\t\t);\n\t\t}\n\n\t\t// remove any that don't exist as available shots, either off the board\n\t\t// or already shot\n\t\tconst filteredPossibleShots = possibleShots.filter((shot) =>\n\t\t\tavailableShots.includes(shot)\n\t\t);\n\t\tif (filteredPossibleShots.length) {\n\t\t\treturn filteredPossibleShots[\n\t\t\t\tMath.floor(Math.random() * filteredPossibleShots.length)\n\t\t\t];\n\t\t}\n\t}\n\n\t// TARGET SOLO MARKER\n\tif (unsunkShots.length) {\n\t\tconst firstUnsunkShot = unsunkShots[0];\n\t\tconst soloShotChoices = [\n\t\t\tfirstUnsunkShot + 1,\n\t\t\tfirstUnsunkShot - 1,\n\t\t\tfirstUnsunkShot + 10,\n\t\t\tfirstUnsunkShot - 10,\n\t\t];\n\t\tconst filteredSoloShots = soloShotChoices.filter((shot) => {\n\t\t\t// if this shot carries over to next row, ignore it\n\t\t\tif (firstUnsunkShot % 10 === 0) {\n\t\t\t\treturn (shot - 9) % 10 !== 0 && availableShots.includes(shot);\n\t\t\t} else if ((firstUnsunkShot - 9) % 10 === 0) {\n\t\t\t\treturn shot % 10 !== 0 && availableShots.includes(shot);\n\t\t\t}\n\t\t\treturn availableShots.includes(shot);\n\t\t});\n\t\tif (filteredSoloShots.length) {\n\t\t\treturn filteredSoloShots[\n\t\t\t\tMath.floor(Math.random() * filteredSoloShots.length)\n\t\t\t];\n\t\t}\n\t}\n\n\t// NOTHING DETECTED, FIRE RANDOMLY\n\t// return a random shot\n\treturn availableShots[Math.floor(Math.random() * availableShots.length)];\n}\n\nexport default computerAI;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}