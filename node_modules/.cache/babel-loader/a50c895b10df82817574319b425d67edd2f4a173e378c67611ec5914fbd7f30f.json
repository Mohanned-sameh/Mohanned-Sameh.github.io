{"ast":null,"code":"import _slicedToArray from\"/home/mohanned/Downloads/battleship/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useContext,useState}from'react';import{GameBoardGrid,Cell,SetupGridContainer,WatersContainer}from'../styled_components/gameControllerStyles';import findShipPlacement from'../../game_helpers/findShipPlacement';import ShotMarker from'../icons/ShotMarker';import computerTurn from'../../game_helpers/computerTurn';import checkWinner from'../../game_helpers/checkWinner';import humanTurn from'../../game_helpers/humanTurn';import{store}from'../../GameController';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function EnemyWatersGrid(_ref){var playSound=_ref.playSound;var _useContext=useContext(store),state=_useContext.state,dispatch=_useContext.dispatch;var turn=state.turn,winner=state.winner;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),shotTimeout=_useState2[0],setShotTimeout=_useState2[1];var players=state.players;var computer=players.computer;var computerBoard=computer.gameBoard;var playerBoard=players.human.gameBoard;var handlePlayerShot=function handlePlayerShot(index){if(!shotTimeout&&!winner){// ignore shots while HUD is sending message\nsetShotTimeout(true);// clear message HUD\ndispatch({type:'RESET_MESSAGE'});humanTurn({dispatch:dispatch,index:index,computer:computer,computerTurn:computerTurn,players:players,checkWinner:checkWinner,playSound:playSound},{playerBoard:playerBoard,setShotTimeout:setShotTimeout,checkWinner:checkWinner,computer:computer,dispatch:dispatch,players:players,playSound:playSound});}};// create a map to populate the grid\nvar fillCells=function fillCells(){var arr=[];for(var i=0;i<100;i++){arr.push([i]);}return computerBoard.opponentBoard().map(function(cell,index){return/*#__PURE__*/_jsx(Cell,{board:\"enemy\",cursor:cell==='empty'?'crosshair':'not-allowed',onClick:function onClick(){if(turn===0&&cell==='empty'){handlePlayerShot(index);}},shot:cell!=='empty',children:cell!=='empty'&&/*#__PURE__*/_jsx(ShotMarker,{hit:cell==='hit'?'hit':''})},index);});};return/*#__PURE__*/_jsxs(WatersContainer,{row:\"3\",children:[/*#__PURE__*/_jsx(SetupGridContainer,{children:/*#__PURE__*/_jsx(GameBoardGrid,{children:computer.ships.map(function(ship){if(ship.isSunk()){var placement=findShipPlacement(ship,computerBoard.board);var shipProps={start:placement.start,axis:placement.axis,sunk:ship.isSunk()};return ship.getComponentWithProps(shipProps);}else{return null;}})})}),/*#__PURE__*/_jsx(SetupGridContainer,{children:/*#__PURE__*/_jsx(GameBoardGrid,{children:fillCells()})})]});}export default EnemyWatersGrid;","map":{"version":3,"names":["React","useContext","useState","GameBoardGrid","Cell","SetupGridContainer","WatersContainer","findShipPlacement","ShotMarker","computerTurn","checkWinner","humanTurn","store","EnemyWatersGrid","playSound","state","dispatch","turn","winner","shotTimeout","setShotTimeout","players","computer","computerBoard","gameBoard","playerBoard","human","handlePlayerShot","index","type","fillCells","arr","i","push","opponentBoard","map","cell","ships","ship","isSunk","placement","board","shipProps","start","axis","sunk","getComponentWithProps"],"sources":["/home/mohanned/Downloads/battleship/src/components/game_window/EnemyWatersGrid.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport {\n\tGameBoardGrid,\n\tCell,\n\tSetupGridContainer,\n\tWatersContainer,\n} from '../styled_components/gameControllerStyles';\nimport findShipPlacement from '../../game_helpers/findShipPlacement';\nimport ShotMarker from '../icons/ShotMarker';\nimport computerTurn from '../../game_helpers/computerTurn';\nimport checkWinner from '../../game_helpers/checkWinner';\nimport humanTurn from '../../game_helpers/humanTurn';\nimport { store } from '../../GameController';\n\nfunction EnemyWatersGrid({ playSound }) {\n\tconst { state, dispatch } = useContext(store);\n\tconst { turn, winner } = state;\n\tconst [shotTimeout, setShotTimeout] = useState(false);\n\tconst { players } = state;\n\tconst computer = players.computer;\n\tconst computerBoard = computer.gameBoard;\n\tconst playerBoard = players.human.gameBoard;\n\n\tconst handlePlayerShot = (index) => {\n\t\tif (!shotTimeout && !winner) {\n\t\t\t// ignore shots while HUD is sending message\n\t\t\tsetShotTimeout(true);\n\t\t\t// clear message HUD\n\t\t\tdispatch({ type: 'RESET_MESSAGE' });\n\t\t\thumanTurn(\n\t\t\t\t{\n\t\t\t\t\tdispatch,\n\t\t\t\t\tindex,\n\t\t\t\t\tcomputer,\n\t\t\t\t\tcomputerTurn,\n\t\t\t\t\tplayers,\n\t\t\t\t\tcheckWinner,\n\t\t\t\t\tplaySound,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tplayerBoard,\n\t\t\t\t\tsetShotTimeout,\n\t\t\t\t\tcheckWinner,\n\t\t\t\t\tcomputer,\n\t\t\t\t\tdispatch,\n\t\t\t\t\tplayers,\n\t\t\t\t\tplaySound,\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t};\n\n\t// create a map to populate the grid\n\tconst fillCells = () => {\n\t\tlet arr = [];\n\t\tfor (let i = 0; i < 100; i++) {\n\t\t\tarr.push([i]);\n\t\t}\n\t\treturn computerBoard.opponentBoard().map((cell, index) => {\n\t\t\treturn (\n\t\t\t\t<Cell\n\t\t\t\t\tkey={index}\n\t\t\t\t\tboard='enemy'\n\t\t\t\t\tcursor={cell === 'empty' ? 'crosshair' : 'not-allowed'}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tif (turn === 0 && cell === 'empty') {\n\t\t\t\t\t\t\thandlePlayerShot(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tshot={cell !== 'empty'}\n\t\t\t\t>\n\t\t\t\t\t{cell !== 'empty' && <ShotMarker hit={cell === 'hit' ? 'hit' : ''} />}\n\t\t\t\t</Cell>\n\t\t\t);\n\t\t});\n\t};\n\n\treturn (\n\t\t<WatersContainer row='3'>\n\t\t\t<SetupGridContainer>\n\t\t\t\t<GameBoardGrid>\n\t\t\t\t\t{computer.ships.map((ship) => {\n\t\t\t\t\t\tif (ship.isSunk()) {\n\t\t\t\t\t\t\tconst placement = findShipPlacement(ship, computerBoard.board);\n\t\t\t\t\t\t\tconst shipProps = {\n\t\t\t\t\t\t\t\tstart: placement.start,\n\t\t\t\t\t\t\t\taxis: placement.axis,\n\t\t\t\t\t\t\t\tsunk: ship.isSunk(),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\treturn ship.getComponentWithProps(shipProps);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t</GameBoardGrid>\n\t\t\t</SetupGridContainer>\n\t\t\t<SetupGridContainer>\n\t\t\t\t<GameBoardGrid>{fillCells()}</GameBoardGrid>\n\t\t\t</SetupGridContainer>\n\t\t</WatersContainer>\n\t);\n}\n\nexport default EnemyWatersGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}