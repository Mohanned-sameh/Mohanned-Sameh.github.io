{"ast":null,"code":"import _objectSpread from\"/home/mohanned/Downloads/battleship-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/home/mohanned/Downloads/battleship-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";// callback refers to the computer turn, so that it only executes when this function completes\nfunction humanTurn(_ref,computerTurnArgs){var dispatch=_ref.dispatch,index=_ref.index,computer=_ref.computer,computerTurn=_ref.computerTurn,players=_ref.players,checkWinner=_ref.checkWinner,playSound=_ref.playSound;// don't allow if there's a winner\nif(!checkWinner(players)){// initialize mutable sound variable, allow outcomes to mutate\nvar sound;var computerBoard=computer.gameBoard;playSound('fireShot');setTimeout(function(){if(computerBoard.checkIfShotHit(index)){sound='shotHit';var newShips=_toConsumableArray(computer.ships);var hitShip=newShips.find(function(ship){return ship.name===computerBoard.checkIfShotHit(index);});hitShip.hit(index);dispatch({type:'SET_SHIP_HITS',payload:{player:'computer',ship:hitShip,hits:hitShip.hits}});if(hitShip.isSunk()){dispatch({type:'SET_MESSAGE',payload:\"You fire a shot into enemy waters ...... you sunk their \".concat(hitShip.name,\"!\")});}else{dispatch({type:'SET_MESSAGE',payload:\"You fire a shot into enemy waters ...... it's a hit!\"});}}else{sound='shotMiss';dispatch({type:'SET_MESSAGE',payload:'You fire a shot into enemy waters ...... and miss.'});}},0);// give time for message to populate\nsetTimeout(function(){playSound(sound);dispatch({type:'FIRE_SHOT',payload:{player:'human',location:index}});dispatch({type:'SET_TURN',payload:1});computerTurn(_objectSpread({},computerTurnArgs));},1700);}}export default humanTurn;","map":{"version":3,"names":["humanTurn","computerTurnArgs","dispatch","index","computer","computerTurn","players","checkWinner","playSound","sound","computerBoard","gameBoard","setTimeout","checkIfShotHit","newShips","ships","hitShip","find","ship","name","hit","type","payload","player","hits","isSunk","location"],"sources":["/home/mohanned/Downloads/battleship-main/src/game_helpers/humanTurn.js"],"sourcesContent":["// callback refers to the computer turn, so that it only executes when this function completes\nfunction humanTurn(\n\t{ dispatch, index, computer, computerTurn, players, checkWinner, playSound },\n\tcomputerTurnArgs\n) {\n\t// don't allow if there's a winner\n\tif (!checkWinner(players)) {\n\t\t// initialize mutable sound variable, allow outcomes to mutate\n\t\tlet sound;\n\t\tconst computerBoard = computer.gameBoard;\n\t\tplaySound('fireShot');\n\t\tsetTimeout(() => {\n\t\t\tif (computerBoard.checkIfShotHit(index)) {\n\t\t\t\tsound = 'shotHit';\n\t\t\t\tconst newShips = [...computer.ships];\n\t\t\t\tconst hitShip = newShips.find(\n\t\t\t\t\t(ship) => ship.name === computerBoard.checkIfShotHit(index)\n\t\t\t\t);\n\t\t\t\thitShip.hit(index);\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_SHIP_HITS',\n\t\t\t\t\tpayload: { player: 'computer', ship: hitShip, hits: hitShip.hits },\n\t\t\t\t});\n\t\t\t\tif (hitShip.isSunk()) {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_MESSAGE',\n\t\t\t\t\t\tpayload: `You fire a shot into enemy waters ...... you sunk their ${hitShip.name}!`,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_MESSAGE',\n\t\t\t\t\t\tpayload: \"You fire a shot into enemy waters ...... it's a hit!\",\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsound = 'shotMiss';\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_MESSAGE',\n\t\t\t\t\tpayload: 'You fire a shot into enemy waters ...... and miss.',\n\t\t\t\t});\n\t\t\t}\n\t\t}, 0);\n\t\t// give time for message to populate\n\t\tsetTimeout(() => {\n\t\t\tplaySound(sound);\n\t\t\tdispatch({\n\t\t\t\ttype: 'FIRE_SHOT',\n\t\t\t\tpayload: { player: 'human', location: index },\n\t\t\t});\n\t\t\tdispatch({ type: 'SET_TURN', payload: 1 });\n\t\t\tcomputerTurn({\n\t\t\t\t...computerTurnArgs,\n\t\t\t});\n\t\t}, 1700);\n\t}\n}\n\nexport default humanTurn;\n"],"mappings":"mQAAA;AACA,QAASA,UAAS,MAEjBC,gBAAgB,CACf,IAFCC,SAAQ,MAARA,QAAQ,CAAEC,KAAK,MAALA,KAAK,CAAEC,QAAQ,MAARA,QAAQ,CAAEC,YAAY,MAAZA,YAAY,CAAEC,OAAO,MAAPA,OAAO,CAAEC,WAAW,MAAXA,WAAW,CAAEC,SAAS,MAATA,SAAS,CAG1E;AACA,GAAI,CAACD,WAAW,CAACD,OAAO,CAAC,CAAE,CAC1B;AACA,GAAIG,MAAK,CACT,GAAMC,cAAa,CAAGN,QAAQ,CAACO,SAAS,CACxCH,SAAS,CAAC,UAAU,CAAC,CACrBI,UAAU,CAAC,UAAM,CAChB,GAAIF,aAAa,CAACG,cAAc,CAACV,KAAK,CAAC,CAAE,CACxCM,KAAK,CAAG,SAAS,CACjB,GAAMK,SAAQ,oBAAOV,QAAQ,CAACW,KAAK,CAAC,CACpC,GAAMC,QAAO,CAAGF,QAAQ,CAACG,IAAI,CAC5B,SAACC,IAAI,QAAKA,KAAI,CAACC,IAAI,GAAKT,aAAa,CAACG,cAAc,CAACV,KAAK,CAAC,GAC3D,CACDa,OAAO,CAACI,GAAG,CAACjB,KAAK,CAAC,CAClBD,QAAQ,CAAC,CACRmB,IAAI,CAAE,eAAe,CACrBC,OAAO,CAAE,CAAEC,MAAM,CAAE,UAAU,CAAEL,IAAI,CAAEF,OAAO,CAAEQ,IAAI,CAAER,OAAO,CAACQ,IAAK,CAClE,CAAC,CAAC,CACF,GAAIR,OAAO,CAACS,MAAM,EAAE,CAAE,CACrBvB,QAAQ,CAAC,CACRmB,IAAI,CAAE,aAAa,CACnBC,OAAO,mEAA6DN,OAAO,CAACG,IAAI,KACjF,CAAC,CAAC,CACH,CAAC,IAAM,CACNjB,QAAQ,CAAC,CACRmB,IAAI,CAAE,aAAa,CACnBC,OAAO,CAAE,sDACV,CAAC,CAAC,CACH,CACD,CAAC,IAAM,CACNb,KAAK,CAAG,UAAU,CAClBP,QAAQ,CAAC,CACRmB,IAAI,CAAE,aAAa,CACnBC,OAAO,CAAE,oDACV,CAAC,CAAC,CACH,CACD,CAAC,CAAE,CAAC,CAAC,CACL;AACAV,UAAU,CAAC,UAAM,CAChBJ,SAAS,CAACC,KAAK,CAAC,CAChBP,QAAQ,CAAC,CACRmB,IAAI,CAAE,WAAW,CACjBC,OAAO,CAAE,CAAEC,MAAM,CAAE,OAAO,CAAEG,QAAQ,CAAEvB,KAAM,CAC7C,CAAC,CAAC,CACFD,QAAQ,CAAC,CAAEmB,IAAI,CAAE,UAAU,CAAEC,OAAO,CAAE,CAAE,CAAC,CAAC,CAC1CjB,YAAY,kBACRJ,gBAAgB,EAClB,CACH,CAAC,CAAE,IAAI,CAAC,CACT,CACD,CAEA,cAAeD,UAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}